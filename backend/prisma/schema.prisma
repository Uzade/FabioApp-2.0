// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./../db/main.sqlite"
}

model Permition{
  id            Int         @id @default(autoincrement())
  name          String      @unique @default("unnamed-permition")
  seeOwnOffers  Boolean
  requestOffers Boolean
  scanDevices   Boolean
  manageOffers  Boolean
  manageDevices Boolean
  manageEvents  Boolean
  users         User[]
}

model User{
  id            Int         @id @default(autoincrement())
  UID           String      @unique
  devices       Devices[]
  password      String
  email         String      @unique
  permition     Permition   @relation(fields:[permitionID], references: [id])
  permitionID   Int
  apiKey        String?
}

model DeviceTest{
id            Int         @id @default(autoincrement()) 
devices       Devices     @relation(fields:[deviceID], references: [id])
deviceID      Int         
date          DateTime
category1     Boolean
category2     Boolean

}

model Customer{
id            Int         @id @default(autoincrement()) 
event         Event[]
name          String
company       String? 
streetNum     String 
city          String

}

model Location{
  id            Int         @id @default(autoincrement())
  isEvent       Boolean
  isStorage     Boolean
  name          String
  adress        String      @unique
  devicegroup   DeviceGroup[] 
  event         Event[] 
  details       String?
}

model Category{
  id            Int         @id @default(autoincrement()) 
  devices       Devices[]
  name          String
}

model Subcategory{
  id            Int         @id @default(autoincrement())
  name          String
  devices       Devices[]
}

model PrimitiveDevice{
  id            Int         @id @default(autoincrement())
  name          String  
  deviceGroup   DeviceGroup? @relation(fields:[groupID], references: [id])
  groupID       Int?         
  codeExists    Boolean
}

model Devices{
  deviceTest    DeviceTest[]
  id            Int         @id @default(autoincrement())
  name          String  
  company       String  
  category      Category    @relation(fields:[categoryID], references: [id])
  categoryID    Int         
  subcategory   Subcategory @relation(fields:[subcategoryID], references: [id])
  subcategoryID Int         
  Creator       User        @relation(fields:[creatorID], references: [id])
  creatorID     Int         
  price         Int
  codeExists    Boolean 
  deviceGroup   DeviceGroup? @relation(fields:[groupID], references: [id])
  groupID       Int?         
}

model Event{
  id            Int         @id @default(autoincrement())
  creatorID     Int         
  customer      Customer    @relation(fields:[customerID], references: [id])
  customerID    Int         
  devices       DeviceGroup[]
  location      Location    @relation(fields:[locationID], references: [id])
  locationID    Int         
  startDate     DateTime
  endDate       DateTime
  offer         Offer?       @relation(fields:[offerID], references: [id])
  offerID       Int?         @unique
  }

  model DeviceGroup{
    id            Int         @id @default(autoincrement())
    devices       Devices[] 
    primitiveDevice PrimitiveDevice[]
    name          String
    location      Location    @relation(fields:[locationID], references: [id])
    locationID    Int         
    events        Event[]     
  }

  model Offer{
    id            Int         @id @default(autoincrement())
    event         Event?       
    price         Int
  }

